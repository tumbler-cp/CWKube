digraph "dronenotificationlastiteration" {

splines  = ortho;
fontname = "Inconsolata";

node [colorscheme = ylgnbu4];
edge [colorscheme = dark28, dir = both];

AdminInitializer                          [shape = record, label = "{ AdminInitializer | + onApplicationEvent(ContextRefreshedEvent) : void\l }"];
AppConfig                                 [shape = record, label = "{ AppConfig | + openAPI() : OpenAPI\l + userDetailsService(UserRepository) : UserDetailsService\l + messageConverter() : MappingJackson2HttpMessageConverter\l + authenticationManager(AuthenticationConfiguration) : AuthenticationManager\l + passwordEncoder() : PasswordEncoder\l - createSecurityScheme() : SecurityScheme\l + objectMapper() : ObjectMapper\l }"];
AuthController                            [shape = record, label = "{ AuthController | + verifyRequest() : ResponseEntity\<?\>\l + register(AuthRequest) : ResponseEntity\<AuthTokenDTO\>\l + updateUser(UserDTO) : UserDTO\l + login(AuthRequest) : ResponseEntity\<AuthTokenDTO\>\l + me() : UserDTO\l }"];
AuthRequest                               [shape = record, label = "{ AuthRequest | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l + builder() : AuthRequestBuilder\l| password : String\l  username : String\l }"];
AuthService                               [shape = record, label = "{ AuthService | + login(AuthRequest) : AuthTokenDTO\l + register(AuthRequest) : AuthTokenDTO\l| currentUserDetails : UserDetails\l  currentUser : User\l }"];
AuthTokenDTO                              [shape = record, label = "{ AuthTokenDTO | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l + builder() : AuthTokenDTOBuilder\l| token : String\l }"];
BindRequest                               [shape = record, label = "{ BindRequest | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l + builder() : BindRequestBuilder\l| userID : Long\l  token : StationTokenDTO\l }"];
CreateOrderRequest                        [shape = record, label = "{ CreateOrderRequest | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l| positions : List\<OrderPositionDTO\>\l  customerId : Long\l }"];
Customer                                  [shape = record, label = "{ Customer | + toString() : String\l + builder() : CustomerBuilder\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l| id : Long\l  user : User\l  address : String\l }"];
CustomerDTO                               [shape = record, label = "{ CustomerDTO | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l + builder() : CustomerDTOBuilder\l| id : Long\l  address : String\l }"];
CustomerRepository                        [shape = record, label = "{ \<\<interface\>\>\nCustomerRepository |  }"];
CustomerService                           [shape = record, label = "{ CustomerService | + dtoFromEntity(Customer) : CustomerDTO\l + save(CustomerDTO) : Customer\l| senders : List\<SenderDTO\>\l }"];
DroneNotificationLastIterationApplication [shape = record, label = "{ DroneNotificationLastIterationApplication | + main(String[]) : void\l }"];
DroneStation                              [shape = record, label = "{ DroneStation | + builder() : DroneStationBuilder\l + toString() : String\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l| id : Long\l  address : String\l  uuid : UUID\l }"];
DroneStationDTO                           [shape = record, label = "{ DroneStationDTO | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l + builder() : DroneStationDTOBuilder\l| id : Long\l  address : String\l }"];
DroneStationRepository                    [shape = record, label = "{ \<\<interface\>\>\nDroneStationRepository | + getDroneStationByUuid(UUID) : DroneStation\l }"];
DroneStationService                       [shape = record, label = "{ DroneStationService | + generateToken(Long) : StationTokenDTO\l| stations : List\<DroneStationDTO\>\l }"];
GlobalExceptionHandler                    [shape = record, label = "{ GlobalExceptionHandler | + handleException(Exception) : ResponseEntity\<String\>\l + handleDroneException(Exception) : ResponseEntity\<String\>\l }"];
Good                                      [shape = record, label = "{ Good | + equals(Object) : boolean\l + builder() : GoodBuilder\l + toString() : String\l # canEqual(Object) : boolean\l + hashCode() : int\l| senderDemo : String\l  name : String\l  description : String\l  id : Long\l  sender : Sender\l  weight : Double\l  positions : Set\<WareHousePosition\>\l }"];
GoodController                            [shape = record, label = "{ GoodController | + deleteGood(Long) : void\l + newGood(GoodDTO) : GoodDTO\l| all : List\<GoodDTO\>\l }"];
GoodDTO                                   [shape = record, label = "{ GoodDTO | + toString() : String\l + builder() : GoodDTOBuilder\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l| name : String\l  description : String\l  sender : String\l  weight : Double\l  id : Long\l }"];
GoodRepository                            [shape = record, label = "{ \<\<interface\>\>\nGoodRepository | + findAllBySender(Sender) : List\<Good\>\l + findByIdAndSender(Long, Sender) : Optional\<Good\>\l }"];
GoodService                               [shape = record, label = "{ GoodService | + dtoFromEntity(Good) : GoodDTO\l + getById(Long) : Good\l + save(GoodDTO) : Good\l + delete(Long) : void\l + findAll() : List\<Good\>\l }"];
JwtFilter                                 [shape = record, label = "{ JwtFilter | # doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain) : void\l }"];
JwtService                                [shape = record, label = "{ JwtService | + generateToken(Map\<String, Object\>, UserDetails) : String\l + extractUsername(String) : String\l - extractAllClaims(String) : Claims\l + extractClaim(String, Function\<Claims, T\>) : T\l + isTokenValid(String, UserDetails) : boolean\l + generateToken(UserDetails) : String\l - isTokenExpired(String) : boolean\l - getExpirationDate(String) : Date\l| signingKey : SecretKey\l }"];
NotEnoughEditingRightsException           [shape = record, label = "{ NotEnoughEditingRightsException |  }"];
NotEnoughRightsException                  [shape = record, label = "{ NotEnoughRightsException |  }"];
NotSenderException                        [shape = record, label = "{ NotSenderException |  }"];
Order                                     [shape = record, label = "{ Order | + equals(Object) : boolean\l + toString() : String\l + hashCode() : int\l + builder() : OrderBuilder\l # canEqual(Object) : boolean\l| acceptance : OrderAcceptance\l  id : Long\l  sender : Sender\l  updateTime : Date\l  customer : Customer\l  orderDate : LocalDateTime\l  stage : OrderStage\l }"];
OrderAcceptance                           [shape = record, label = "{ \<\<enumeration\>\>\nOrderAcceptance | + values() : OrderAcceptance[]\l + valueOf(String) : OrderAcceptance\l }"];
OrderController                           [shape = record, label = "{ OrderController | + create(CreateOrderRequest) : ResponseEntity\<OrderDTO\>\l + acceptOrder(OrderDTO) : ResponseEntity\<?\>\l + rejectOrder(OrderDTO) : ResponseEntity\<?\>\l + receiveOrder(OrderDTO) : ResponseEntity\<?\>\l| ordersCustomer : List\<OrderDTO\>\l  ordersSender : List\<OrderDTO\>\l }"];
OrderDTO                                  [shape = record, label = "{ OrderDTO | + equals(Object) : boolean\l + toString() : String\l + builder() : OrderDTOBuilder\l # canEqual(Object) : boolean\l + hashCode() : int\l| acceptance : OrderAcceptance\l  sender : String\l  id : Long\l  orderDate : LocalDateTime\l  stage : OrderStage\l  destination : String\l }"];
OrderPosition                             [shape = record, label = "{ OrderPosition | + toString() : String\l + builder() : OrderPositionBuilder\l + hashCode() : int\l # canEqual(Object) : boolean\l + equals(Object) : boolean\l| good : Good\l  quantity : int\l  id : Long\l  order : Order\l }"];
OrderPositionDTO                          [shape = record, label = "{ OrderPositionDTO | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l| goodID : Long\l  quantity : int\l }"];
OrderPositionRepository                   [shape = record, label = "{ \<\<interface\>\>\nOrderPositionRepository | + findAllByOrder(Order) : List\<OrderPosition\>\l }"];
OrderPositionService                      [shape = record, label = "{ OrderPositionService | + changePosition(Long, int) : void\l + deletePosition(Long) : void\l + createPosition(Long, Long, int) : void\l }"];
OrderRepository                           [shape = record, label = "{ \<\<interface\>\>\nOrderRepository | + findById(Long) : Optional\<Order\>\l + findAllByCustomer(Customer) : List\<Order\>\l + findBySender(Sender) : Object\l + findAllBySender(Sender) : List\<Order\>\l }"];
OrderService                              [shape = record, label = "{ OrderService | + acceptOrder(Order) : void\l + rejectOrder(Order) : void\l + receiveOrder(Order) : void\l + dtoFromEntity(Order) : OrderDTO\l + createOrder(CreateOrderRequest) : OrderDTO\l| senderOrders : List\<OrderDTO\>\l  customerOrders : List\<OrderDTO\>\l }"];
OrderStatus                               [shape = record, label = "{ OrderStatus | + hashCode() : int\l # canEqual(Object) : boolean\l + toString() : String\l + builder() : OrderStatusBuilder\l + equals(Object) : boolean\l| estimatedTimeLeft : Double\l  id : Long\l  order : Order\l  startTime : LocalDateTime\l }"];
PhoneNotSetException                      [shape = record, label = "{ PhoneNotSetException |  }"];
Role                                      [shape = record, label = "{ \<\<enumeration\>\>\nRole | + valueOf(String) : Role\l + values() : Role[]\l }"];
SecurityConfig                            [shape = record, label = "{ SecurityConfig | + securityFilterChain(HttpSecurity, JwtFilter) : SecurityFilterChain\l }"];
Sender                                    [shape = record, label = "{ Sender | + hashCode() : int\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + toString() : String\l + builder() : SenderBuilder\l| droneStation : DroneStation\l  wareHouse : WareHouse\l  id : Long\l  shopName : String\l  user : User\l }"];
SenderBindController                      [shape = record, label = "{ SenderBindController | + bind(BindRequest) : ResponseEntity\<SenderDTO\>\l + generateToken() : ResponseEntity\<SenderTokenDTO\>\l }"];
SenderBindService                         [shape = record, label = "{ SenderBindService | + generateToken() : SenderTokenDTO\l + bind(String, Long) : SenderDTO\l }"];
SenderController                          [shape = record, label = "{ SenderController | + me() : SenderDTO\l + goods(Long) : List\<GoodDTO\>\l + update(SenderDTO) : SenderDTO\l }"];
SenderDTO                                 [shape = record, label = "{ SenderDTO | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l + builder() : SenderDTOBuilder\l| id : Long\l  shopName : String\l }"];
SenderRepository                          [shape = record, label = "{ \<\<interface\>\>\nSenderRepository |  }"];
SenderService                             [shape = record, label = "{ SenderService | + save(SenderDTO) : Sender\l + dtoFromEntity(Sender) : SenderDTO\l| currentSender : Sender\l }"];
SenderStatus                              [shape = record, label = "{ \<\<enumeration\>\>\nSenderStatus | + valueOf(String) : SenderStatus\l + values() : SenderStatus[]\l }"];
SenderTokenDTO                            [shape = record, label = "{ SenderTokenDTO | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l + builder() : SenderTokenDTOBuilder\l| token : String\l }"];
SenderTokenService                        [shape = record, label = "{ SenderTokenService | + generateToken(Map\<String, Object\>, Sender) : String\l - extractClaims(String) : Claims\l + isTokenValid(String, Sender) : boolean\l + extractSenderId(String) : Long\l + extractClaim(String, Function\<Claims, T\>) : T\l - isTokenExpired(String) : boolean\l - getExpirationDate(String) : Date\l + generateToken(Sender) : String\l| signingKey : SecretKey\l }"];
StationBindController                     [shape = record, label = "{ StationBindController | + bind(BindRequest) : ResponseEntity\<DroneStationDTO\>\l }"];
StationBindService                        [shape = record, label = "{ StationBindService | + bind(String, Long) : DroneStationDTO\l }"];
StationController                         [shape = record, label = "{ StationController | + generateStationTokenDTO(Long) : StationTokenDTO\l| allStations : List\<DroneStationDTO\>\l }"];
StationTokenDTO                           [shape = record, label = "{ StationTokenDTO | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l + builder() : StationTokenDTOBuilder\l| token : String\l }"];
StationTokenService                       [shape = record, label = "{ StationTokenService | + isTokenValid(String, DroneStation) : boolean\l - getExpirationDate(String) : Date\l - extractClaims(String) : Claims\l + extractClaim(String, Function\<Claims, T\>) : T\l - isTokenExpired(String) : boolean\l + generateToken(DroneStation) : String\l + generateToken(Map\<String, Object\>, DroneStation) : String\l + extractStationUUID(String) : String\l| signingKey : SecretKey\l }"];
User                                      [shape = record, label = "{ User | + hashCode() : int\l - $default$senderStatus() : SenderStatus\l + builder() : UserBuilder\l + equals(Object) : boolean\l - $default$verification() : Verification\l + toString() : String\l # canEqual(Object) : boolean\l| password : String\l  role : Role\l  id : Long\l  email : String\l  phone : String\l  verification : Verification\l  authorities : Collection\<GrantedAuthority\>\l  sender : Sender\l  username : String\l  customer : Customer\l  senderStatus : SenderStatus\l }"];
UserDTO                                   [shape = record, label = "{ UserDTO | + builder() : UserDTOBuilder\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + hashCode() : int\l + toString() : String\l| role : Role\l  username : String\l  id : Long\l  email : String\l  phone : String\l  verified : Boolean\l }"];
UserNotFoundException                     [shape = record, label = "{ UserNotFoundException |  }"];
UserNotVerifiedException                  [shape = record, label = "{ UserNotVerifiedException |  }"];
UserRepository                            [shape = record, label = "{ \<\<interface\>\>\nUserRepository | + Role(Role) : List\<User\>\l + findUById(Long) : Optional\<User\>\l + findAllByRole(Role) : List\<User\>\l + findUByUsername(String) : Optional\<User\>\l + findByUsername(String) : UserDetails\l }"];
UserService                               [shape = record, label = "{ UserService | + getUserById(Long) : User\l + dtoFromUser(User) : UserDTO\l - isValidPhoneNumber(String) : boolean\l + save(UserDTO) : User\l + getUserByUsername(String) : User\l }"];
Verification                              [shape = record, label = "{ \<\<enumeration\>\>\nVerification | + valueOf(String) : Verification\l + values() : Verification[]\l }"];
VerificationService                       [shape = record, label = "{ VerificationService | + verifyUser(String) : void\l }"];
WareHouse                                 [shape = record, label = "{ WareHouse | + equals(Object) : boolean\l # canEqual(Object) : boolean\l + toString() : String\l + hashCode() : int\l + builder() : WareHouseBuilder\l| id : Long\l  owner : Sender\l  positions : Set\<WareHousePosition\>\l }"];
WareHouseController                       [shape = record, label = "{ WareHouseController | + changePosition(WareHousePositionDTO) : ResponseEntity\<?\>\l + createPosition(WareHousePositionDTO) : ResponseEntity\<?\>\l| positions : List\<WareHousePositionDTO\>\l }"];
WareHousePosition                         [shape = record, label = "{ WareHousePosition | # canEqual(Object) : boolean\l + hashCode() : int\l + builder() : WareHousePositionBuilder\l + toString() : String\l + equals(Object) : boolean\l| good : Good\l  quantity : int\l  wareHouse : WareHouse\l  id : Long\l }"];
WareHousePositionDTO                      [shape = record, label = "{ WareHousePositionDTO | + toString() : String\l + equals(Object) : boolean\l # canEqual(Object) : boolean\l + builder() : WareHousePositionDTOBuilder\l + hashCode() : int\l| id : Long\l  quantity : int\l  good : GoodDTO\l }"];
WareHousePositionRepository               [shape = record, label = "{ \<\<interface\>\>\nWareHousePositionRepository | + findByGood(Good) : WareHousePosition\l + findAllByWareHouse(WareHouse) : List\<WareHousePosition\>\l }"];
WareHouseRepository                       [shape = record, label = "{ \<\<interface\>\>\nWareHouseRepository |  }"];
WareHouseService                          [shape = record, label = "{ WareHouseService | + changePosition(Long, int) : void\l + createPosition(Long, int) : void\l| positions : List\<WareHousePositionDTO\>\l }"];
WrongFormatException                      [shape = record, label = "{ WrongFormatException |  }"];

AdminInitializer                          -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
AdminInitializer                          -> UserRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userRepository\n1"];
AdminInitializer                          -> UserService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userService\n1"];
AuthController                            -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
AuthController                            -> UserService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userService\n1"];
AuthController                            -> VerificationService                       [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "verificationService\n1"];
AuthService                               -> JwtService                                [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "jwtService\n1"];
AuthService                               -> UserRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userRepository\n1"];
BindRequest                               -> StationTokenDTO                           [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "token\n1"];
CreateOrderRequest                        -> OrderPositionDTO                          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "positions\n*"];
Customer                                  -> User                                      [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "user\n1"];
DroneStationService                       -> DroneStationRepository                    [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "droneStationRepository\n1"];
DroneStationService                       -> StationTokenService                       [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "stationTokenService\n1"];
Good                                      -> Sender                                    [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "sender\n1"];
Good                                      -> WareHousePosition                         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "positions\n*"];
GoodController                            -> GoodService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "goodService\n1"];
GoodService                               -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
GoodService                               -> GoodRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "goodRepository\n1"];
GoodService                               -> NotEnoughEditingRightsException           [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
GoodService                               -> NotSenderException                        [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
GoodService                               -> UserRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userRepository\n1"];
JwtFilter                                 -> JwtService                                [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "jwtService\n1"];
Order                                     -> Customer                                  [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "customer\n1"];
Order                                     -> OrderAcceptance                           [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "acceptance\n1"];
Order                                     -> Sender                                    [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "sender\n1"];
OrderController                           -> OrderRepository                           [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "orderRepository\n1"];
OrderController                           -> OrderService                              [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "orderService\n1"];
OrderDTO                                  -> OrderAcceptance                           [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "acceptance\n1"];
OrderPosition                             -> Good                                      [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "good\n1"];
OrderPosition                             -> Order                                     [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "order\n1"];
OrderPositionService                      -> GoodRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "goodRepository\n1"];
OrderPositionService                      -> OrderPositionRepository                   [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "orderPositionRepository\n1"];
OrderPositionService                      -> OrderRepository                           [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "orderRepository\n1"];
OrderService                              -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
OrderService                              -> CustomerRepository                        [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "customerRepository\n1"];
OrderService                              -> GoodRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "goodRepository\n1"];
OrderService                              -> OrderPositionRepository                   [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "orderPositionRepository\n1"];
OrderService                              -> OrderRepository                           [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "orderRepository\n1"];
OrderService                              -> WareHousePositionRepository               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "wareHousePositionRepository\n1"];
OrderStatus                               -> Order                                     [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "order\n1"];
Sender                                    -> DroneStation                              [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "droneStation\n1"];
Sender                                    -> User                                      [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "user\n1"];
Sender                                    -> WareHouse                                 [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "wareHouse\n1"];
SenderBindController                      -> SenderBindService                         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "senderBindService\n1"];
SenderBindService                         -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
SenderBindService                         -> CustomerRepository                        [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "customerRepository\n1"];
SenderBindService                         -> NotSenderException                        [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
SenderBindService                         -> SenderRepository                          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "senderRepository\n1"];
SenderBindService                         -> SenderService                             [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "senderService\n1"];
SenderBindService                         -> SenderTokenService                        [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "senderTokenService\n1"];
SenderBindService                         -> UserService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userService\n1"];
SenderController                          -> SenderService                             [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "senderService\n1"];
SenderService                             -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
SenderService                             -> GoodRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "goodRepository\n1"];
SenderService                             -> NotSenderException                        [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
SenderService                             -> SenderRepository                          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "senderRepository\n1"];
SenderService                             -> UserService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userService\n1"];
StationBindController                     -> StationBindService                        [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "stationBindService\n1"];
StationBindService                        -> DroneStationRepository                    [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "droneStationRepository\n1"];
StationBindService                        -> SenderRepository                          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "senderRepository\n1"];
StationBindService                        -> StationTokenService                       [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "stationTokenService\n1"];
StationBindService                        -> UserNotVerifiedException                  [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
StationBindService                        -> UserRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userRepository\n1"];
StationBindService                        -> UserService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userService\n1"];
StationBindService                        -> WareHouseRepository                       [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "wareHouseRepository\n1"];
StationController                         -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
StationController                         -> DroneStationService                       [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "droneStationService\n1"];
StationController                         -> NotEnoughRightsException                  [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
User                                      -> Customer                                  [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "customer\n1"];
User                                      -> Role                                      [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "role\n1"];
User                                      -> Sender                                    [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "sender\n1"];
User                                      -> SenderStatus                              [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "senderStatus\n1"];
User                                      -> Verification                              [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "verification\n1"];
UserDTO                                   -> Role                                      [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "role\n1"];
UserService                               -> NotEnoughEditingRightsException           [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
UserService                               -> UserNotFoundException                     [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
UserService                               -> UserRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userRepository\n1"];
UserService                               -> WrongFormatException                      [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
VerificationService                       -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
VerificationService                       -> PhoneNotSetException                      [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
VerificationService                       -> UserRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userRepository\n1"];
VerificationService                       -> UserService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "userService\n1"];
WareHouse                                 -> Sender                                    [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "owner\n1"];
WareHouse                                 -> WareHousePosition                         [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "positions\n*"];
WareHouseController                       -> WareHouseService                          [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "wareHouseService\n1"];
WareHousePosition                         -> Good                                      [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "good\n1"];
WareHousePosition                         -> WareHouse                                 [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "wareHouse\n1"];
WareHousePositionDTO                      -> GoodDTO                                   [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "good\n1"];
WareHouseService                          -> AuthService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "authService\n1"];
WareHouseService                          -> GoodRepository                            [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "goodRepository\n1"];
WareHouseService                          -> GoodService                               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "goodService\n1"];
WareHouseService                          -> NotSenderException                        [color = "#595959", style = dashed, arrowtail = none    , arrowhead = vee     , taillabel = "", label = "«create»", headlabel = ""];
WareHouseService                          -> WareHousePositionRepository               [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "wareHousePositionRepository\n1"];
WareHouseService                          -> WareHouseRepository                       [color = "#595959", style = solid , arrowtail = diamond , arrowhead = vee     , taillabel = "1", label = "", headlabel = "wareHouseRepository\n1"];

}
